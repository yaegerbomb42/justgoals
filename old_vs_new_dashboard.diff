diff --git a/src/pages/goals-dashboard/index.jsx b/src/pages/goals-dashboard/index.jsx
index 4526b70..a06de4e 100644
--- a/src/pages/goals-dashboard/index.jsx
+++ b/src/pages/goals-dashboard/index.jsx
@@ -1,4 +1,4 @@
-import React, { useState, useEffect } from 'react';
+import React, { useState, useEffect, useRef } from 'react';
 import { useNavigate } from 'react-router-dom';
 import Header from '../../components/ui/Header';
 import { useAuth } from '../../context/AuthContext';
@@ -11,8 +11,30 @@ import WelcomeHero from './components/WelcomeHero';
 import QuickActions from './components/QuickActions';
 import FilterSortControls from './components/FilterSortControls';
 import GoalCard from './components/GoalCard';
-import GoalCreationModal from './components/GoalCreationModal';
 import EmptyState from './components/EmptyState';
+import Icon from '../../components/AppIcon';
+import GoalCreationModal from './components/GoalCreationModal';
+
+// Onboarding Modal Component
+function OnboardingModal({ open, onClose }) {
+  if (!open) return null;
+  return (
+    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
+      <div className="bg-surface rounded-xl shadow-lg p-8 max-w-lg w-full relative">
+        <button className="absolute top-4 right-4 text-xl" onClick={onClose}>&times;</button>
+        <h2 className="text-2xl font-heading-bold mb-2">Welcome to Yaeger's Goals!</h2>
+        <p className="mb-4 text-text-secondary">Here's how to get started and make the most of your app:</p>
+        <ul className="list-disc pl-6 mb-4 text-text-primary">
+          <li><b>Install:</b> Just double-click the installer for Mac or Windows. No extra setup needed.</li>
+          <li><b>Getting Started:</b> Create your first goal to unlock achievements and analytics. Explore Focus Mode, Journal, and AI Assistant for more features.</li>
+          <li><b>What's New:</b> Enjoy a native desktop experience, auto-updates, and enhanced security with code signing.</li>
+        </ul>
+        <p className="text-xs text-text-secondary">You can always revisit this screen from the dashboard menu.</p>
+        <button className="mt-6 px-4 py-2 bg-primary text-white rounded" onClick={onClose}>Get Started</button>
+      </div>
+    </div>
+  );
+}
 
 const GoalsDashboard = () => {
   const navigate = useNavigate();
@@ -25,6 +47,12 @@ const GoalsDashboard = () => {
   const { user, isAuthenticated } = useAuth();
   const { checkAchievements } = useAchievements();
   const { settings } = useSettings();
+  const [showOnboarding, setShowOnboarding] = useState(() => {
+    return !localStorage.getItem('onboardingDismissed');
+  });
+  const [updateStatus, setUpdateStatus] = useState(null);
+  const [showDownloadMenu, setShowDownloadMenu] = useState(false);
+  const downloadMenuRef = useRef(null);
 
   // Load goals using the entity service
   useEffect(() => {
@@ -61,6 +89,20 @@ const GoalsDashboard = () => {
     }
   }, [user, isAuthenticated, goals]);
 
+  // Electron auto-updater integration
+  useEffect(() => {
+    if (window.electronAPI && window.electronAPI.checkForUpdates) {
+      window.electronAPI.checkForUpdates((status) => {
+        setUpdateStatus(status);
+      });
+    }
+  }, []);
+
+  const handleDismissOnboarding = () => {
+    setShowOnboarding(false);
+    localStorage.setItem('onboardingDismissed', '1');
+  };
+
 
   // Filter and sort goals
   useEffect(() => {
@@ -114,31 +156,9 @@ const GoalsDashboard = () => {
     setFilteredGoals(filtered);
   }, [goals, activeFilter, activeSort]);
 
-  const handleCreateGoal = (newGoalData) => {
-    if (user) {
-      // Add default fields if not provided by modal, matching service expectations
-      const goalToCreate = {
-        // id, createdAt, userId will be handled by entityService.createGoal
-        title: newGoalData.title || "Untitled Goal",
-        description: newGoalData.description || "",
-        category: newGoalData.category || "General",
-        priority: newGoalData.priority || "medium",
-        deadline: newGoalData.deadline || null, // Or a sensible default
-        progress: newGoalData.progress || 0,
-        // Include any other fields your GoalCreationModal provides and your goal object expects
-        // For example, if the modal provides startDate:
-        startDate: newGoalData.startDate || new Date().toISOString(),
-        // lastActivity might be set by other interactions, or on creation.
-        lastActivity: new Date().toISOString(),
-      };
-      const createdGoal = entityService.createGoal(user, goalToCreate);
-      if (createdGoal) {
-        setGoals(prevGoals => [...prevGoals, createdGoal]);
-      }
-    }
-    
-    // Check for achievements
-    checkAchievements();
+  // Restore wizard-based goal creation
+  const handleCreateGoal = () => {
+    navigate('/goal-creation-management');
   };
 
   const handleDeleteGoal = (goalId) => {
@@ -200,53 +220,58 @@ const GoalsDashboard = () => {
   if (!safeGoals.length) {
     return (
       <div className="min-h-screen bg-background">
-        <Header />
+        <Header showDownloadMenu={showDownloadMenu} setShowDownloadMenu={setShowDownloadMenu} />
         <main className="pt-20 pb-24 md:pb-8">
           <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
+            {showOnboarding && <OnboardingModal open={showOnboarding} onClose={handleDismissOnboarding} />}
+            {updateStatus && (
+              <div className="bg-info text-info-content px-4 py-2 text-center">
+                {updateStatus}
+              </div>
+            )}
             <div className="text-center py-16">
               <h1 className="text-2xl font-heading-bold text-text-primary mb-4">No Goals Yet</h1>
               <p className="text-text-secondary mb-8">Start by creating your first goal to unlock achievements and progress tracking.</p>
-              <button onClick={() => setIsCreateModalOpen(true)} className="btn btn-primary">Create Goal</button>
+              <button onClick={handleCreateGoal} className="btn btn-primary">Create Goal</button>
             </div>
           </div>
         </main>
-        <GoalCreationModal isOpen={isCreateModalOpen} onClose={() => setIsCreateModalOpen(false)} onCreateGoal={handleCreateGoal} />
       </div>
     );
   }
 
   return (
     <div className="min-h-screen bg-background">
-      <Header />
-      
+      <Header showDownloadMenu={showDownloadMenu} setShowDownloadMenu={setShowDownloadMenu} />
+      {showOnboarding && <OnboardingModal open={showOnboarding} onClose={handleDismissOnboarding} />}
+      {updateStatus && (
+        <div className="bg-info text-info-content px-4 py-2 text-center">
+          {updateStatus}
+        </div>
+      )}
       <main className="pt-20 pb-24 md:pb-8">
         <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
-          {/* Welcome Hero Section */}
+          {/* Welcome Hero Section - always show */}
           <WelcomeHero
             userName={displayUserStats.name}
             overallProgress={displayUserStats.totalGoals > 0 ? (displayUserStats.completedGoals / displayUserStats.totalGoals) * 100 : 0}
             totalGoals={displayUserStats.totalGoals}
             completedGoals={displayUserStats.completedGoals}
-            streakDays={displayUserStats.streakDays} // Streak still placeholder
+            streakDays={displayUserStats.streakDays}
           />
-
-          {/* Quick Actions */}
+          {/* Quick Actions - always show */}
           <QuickActions
-            onCreateGoal={() => setIsCreateModalOpen(true)}
+            onCreateGoal={handleCreateGoal}
             onOpenDrift={handleOpenDrift}
           />
-
-          {/* Filter and Sort Controls */}
-          {safeGoals.length > 0 && (
-            <FilterSortControls
-              onFilterChange={handleFilterChange}
-              onSortChange={handleSortChange}
-              activeFilter={activeFilter}
-              activeSort={activeSort}
-            />
-          )}
-
-          {/* Goals Grid */}
+          {/* Filter and Sort Controls - always show */}
+          <FilterSortControls
+            onFilterChange={handleFilterChange}
+            onSortChange={handleSortChange}
+            activeFilter={activeFilter}
+            activeSort={activeSort}
+          />
+          {/* Goals Grid or Empty State */}
           {Array.isArray(filteredGoals) && filteredGoals.length > 0 ? (
             <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
               {filteredGoals.map((goal) => (
@@ -260,22 +285,14 @@ const GoalsDashboard = () => {
             </div>
           ) : (
             <EmptyState
-              onCreateGoal={() => setIsCreateModalOpen(true)}
+              onCreateGoal={handleCreateGoal}
               filterType={activeFilter}
             />
           )}
         </div>
       </main>
-
       {/* Floating Action Button */}
       <FloatingActionButton />
-
-      {/* Goal Creation Modal */}
-      <GoalCreationModal
-        isOpen={isCreateModalOpen}
-        onClose={() => setIsCreateModalOpen(false)}
-        onCreateGoal={handleCreateGoal}
-      />
     </div>
   );
 };
